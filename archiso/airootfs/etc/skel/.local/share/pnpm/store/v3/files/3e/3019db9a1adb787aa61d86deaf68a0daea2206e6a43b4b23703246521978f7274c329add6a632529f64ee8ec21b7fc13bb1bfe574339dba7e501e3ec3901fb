/// <reference types="react" />
import { OptionType } from "../../utils/types";
interface ActivityAssets {
    large_image?: string;
    large_text?: string;
    small_image?: string;
    small_text?: string;
}
interface Activity {
    state: string;
    details?: string;
    timestamps?: {
        start?: number;
    };
    assets?: ActivityAssets;
    buttons?: Array<string>;
    name: string;
    application_id: string;
    metadata?: {
        button_urls?: Array<string>;
    };
    type: number;
    flags: number;
}
interface TrackData {
    name: string;
    album: string;
    artist: string;
    url: string;
    imageUrl?: string;
}
declare const enum NameFormat {
    StatusName = "status-name",
    ArtistFirst = "artist-first",
    SongFirst = "song-first",
    ArtistOnly = "artist",
    SongOnly = "song",
    AlbumName = "album"
}
declare const _default: {
    name: string;
    description: string;
    authors: {
        name: string;
        id: bigint;
    }[];
    settingsAboutComponent: () => JSX.Element;
    settings: import("../../utils/types").DefinedSettings<{
        username: {
            description: string;
            type: OptionType.STRING;
        };
        apiKey: {
            description: string;
            type: OptionType.STRING;
        };
        shareUsername: {
            description: string;
            type: OptionType.BOOLEAN;
            default: false;
        };
        shareSong: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
        hideWithSpotify: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
        statusName: {
            description: string;
            type: OptionType.STRING;
            default: string;
        };
        nameFormat: {
            description: string;
            type: OptionType.SELECT;
            options: ({
                label: string;
                value: NameFormat;
                default: true;
            } | {
                label: string;
                value: NameFormat;
                default?: undefined;
            })[];
        };
        useListeningStatus: {
            description: string;
            type: OptionType.BOOLEAN;
            default: false;
        };
        missingArt: {
            description: string;
            type: OptionType.SELECT;
            options: ({
                label: string;
                value: string;
                default: true;
            } | {
                label: string;
                value: string;
                default?: undefined;
            })[];
        };
        showLastFmLogo: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
    }, import("../../utils/types").SettingsChecks<{
        username: {
            description: string;
            type: OptionType.STRING;
        };
        apiKey: {
            description: string;
            type: OptionType.STRING;
        };
        shareUsername: {
            description: string;
            type: OptionType.BOOLEAN;
            default: false;
        };
        shareSong: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
        hideWithSpotify: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
        statusName: {
            description: string;
            type: OptionType.STRING;
            default: string;
        };
        nameFormat: {
            description: string;
            type: OptionType.SELECT;
            options: ({
                label: string;
                value: NameFormat;
                default: true;
            } | {
                label: string;
                value: NameFormat;
                default?: undefined;
            })[];
        };
        useListeningStatus: {
            description: string;
            type: OptionType.BOOLEAN;
            default: false;
        };
        missingArt: {
            description: string;
            type: OptionType.SELECT;
            options: ({
                label: string;
                value: string;
                default: true;
            } | {
                label: string;
                value: string;
                default?: undefined;
            })[];
        };
        showLastFmLogo: {
            description: string;
            type: OptionType.BOOLEAN;
            default: true;
        };
    }>, {}>;
    start(): void;
    stop(): void;
    fetchTrackData(): Promise<TrackData | null>;
    updatePresence(): Promise<void>;
    getLargeImage(track: TrackData): string | undefined;
    getActivity(): Promise<Activity | null>;
} & Record<string, any>;
export default _default;
